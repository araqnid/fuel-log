task npmInstall(type: Exec) {
    inputs.file project.file("package.json")
    outputs.files fileTree(project.file("node_modules")) { include '**/package.json' }
    commandLine "npm", "install"
}

task webpack(type: Exec, dependsOn: npmInstall) {
    outputs.files fileTree(project.file("build/site")) {
        include 'main.js'
    }
    inputs.files fileTree(project.file("src/main/web")) {
        include '**/*.js'
        include '**/*.jsx'
    }
    inputs.files project.file('webpack.config.js')
    commandLine "node_modules/.bin/webpack", "-p", "--devtool", "source-map"
}

task staticFiles(type: Copy) {
    from 'src/main/web'
    into 'build/site'
    include 'index.html'
    include 'images/**'
}

task appStatusUi {
    outputs.files fileTree(project.file("build/site")) {
        include "_status/**"
    }
    doLast {
        def cfg = rootProject.configurations.compile.copy()
        cfg.transitive = false
        def jarfile = cfg.files { dep -> dep.group == "org.araqnid" && dep.name == "app-status" }[0]
        def tmpdir = new File(buildDir, "appStatus")
        copy {
            from zipTree(jarfile)
            include 'org/araqnid/appstatus/site/**'
            into tmpdir
        }
        copy {
            from new File(tmpdir, "org/araqnid/appstatus/site")
            into project.file("build/site/_status")
        }
    }
}

task clean {
    doLast {
        delete project.file("node_modules")
        delete project.file("build")
    }
}

task site(dependsOn: [webpack, staticFiles, appStatusUi]) {
}

task build(dependsOn: [site]) {
}
